package sistemaacademico.visao;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemaacademico.Util.Mensagens;
import sistemaacademico.controle.ControleColaborador;

public class VisaoColaborador extends javax.swing.JFrame {

    private void limparComponentesColaborador() {
        painelRegistro.setVisible(false);
        checkAcademico.setSelected(false);
        checkAtivo.setSelected(false);
        textCPF.setText("");
        textCategoria.setText("");
        textCodigo.setText("");
        textEmail.setText("");
        textNome.setText("");
        textNomeMae.setText("");
        textNomePai.setText("");
        textRG.setText("");
        textMatricula.setText("");
        textCurso.setText("");
        textPeriodo.setText("");
    }

    private void toggleComponentesColaborador(boolean ativo) {
        // Ativo será verdadeiro quando o formulário aceitar entradas
        btnCancelar.setEnabled(ativo);
        btnGravar.setEnabled(ativo);
        btnEditar.setEnabled(!ativo);
        btnExcluir.setEnabled(!ativo);
        btnNovo.setEnabled(!ativo);

        checkAcademico.setEnabled(ativo);
        checkAtivo.setEnabled(ativo);
        textCPF.setEnabled(ativo);
        textCategoria.setEnabled(ativo);
        textCodigo.setEnabled(ativo);
        textEmail.setEnabled(ativo);
        textNome.setEnabled(ativo);
        textNomeMae.setEnabled(ativo);
        textNomePai.setEnabled(ativo);
        textRG.setEnabled(ativo);
        textMatricula.setEnabled(ativo);
        textCurso.setEnabled(ativo);
        textPeriodo.setEnabled(ativo);
    }

    private void habilitarControlesColaborador() {
        toggleComponentesColaborador(true);
    }

    private void desabilitarControlesColaborador() {
        toggleComponentesColaborador(false);
    }

    private void inicializarColaboradores() {
        desabilitarControlesColaborador();
        carregarTabela();
    }

    /**
     * Creates new form VisaoColaborador
     */
    public VisaoColaborador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitulo = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        painelAbas = new javax.swing.JTabbedPane();
        painelPrincipal = new javax.swing.JPanel();
        labelNome = new javax.swing.JLabel();
        textNome = new javax.swing.JTextField();
        labelCPF = new javax.swing.JLabel();
        textCPF = new javax.swing.JTextField();
        labelRG = new javax.swing.JLabel();
        textRG = new javax.swing.JTextField();
        labelEmail = new javax.swing.JLabel();
        textEmail = new javax.swing.JTextField();
        checkAtivo = new javax.swing.JCheckBox();
        labelNomePai = new javax.swing.JLabel();
        textNomePai = new javax.swing.JTextField();
        labelNomeMae = new javax.swing.JLabel();
        textNomeMae = new javax.swing.JTextField();
        labelCategoria = new javax.swing.JLabel();
        textCategoria = new javax.swing.JTextField();
        checkAcademico = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaColaboradores = new javax.swing.JTable();
        btnNovo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        labelCodigo = new javax.swing.JLabel();
        textCodigo = new javax.swing.JTextField();
        painelRegistro = new javax.swing.JPanel();
        textMatricula = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        textCurso = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        textPeriodo = new javax.swing.JTextField();
        painelTelefones = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textDDITelefone = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textNumeroTelefone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textColaboradorTelefone = new javax.swing.JTextField();
        textDDDTelefone = new javax.swing.JTextField();
        textOperadoraTelefone = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaTelefones = new javax.swing.JTable();
        botaoNovoTelefone = new javax.swing.JButton();
        botaoEditarTelefone = new javax.swing.JButton();
        botaoGravarTelefone = new javax.swing.JButton();
        botaoCancelarTelefone = new javax.swing.JButton();
        botaoExcluirTelefone = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        textCodigoTelefone = new javax.swing.JTextField();
        painelProjetos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaProjetos = new javax.swing.JTable();
        painelProjetosGerenciados = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaProjetosGerenciados = new javax.swing.JTable();
        btnNovoProjetoGerenciado = new javax.swing.JButton();
        btnAtualizarListaProjGerenciados = new javax.swing.JButton();
        painelHistorico = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        textCodigoEstado = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textNomeEstado = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textDataIniEstado = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textDataTerEstado = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaEstados = new javax.swing.JTable();
        botaoNovoEstado = new javax.swing.JButton();
        botaoEditarEstado = new javax.swing.JButton();
        botaoGravarEstado = new javax.swing.JButton();
        botaoCancelarEstado = new javax.swing.JButton();
        botaoExcluirEstado = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelTitulo.setBackground(new java.awt.Color(153, 153, 153));

        labelTitulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelTitulo.setForeground(new java.awt.Color(255, 255, 255));
        labelTitulo.setText("Colaboradores");

        javax.swing.GroupLayout panelTituloLayout = new javax.swing.GroupLayout(panelTitulo);
        panelTitulo.setLayout(panelTituloLayout);
        panelTituloLayout.setHorizontalGroup(
            panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTituloLayout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(labelTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTituloLayout.setVerticalGroup(
            panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTituloLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelAbas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                painelAbasStateChanged(evt);
            }
        });

        labelNome.setText("Nome");

        labelCPF.setText("CPF");

        labelRG.setText("RG");

        labelEmail.setText("E-mail");

        checkAtivo.setText("Ativo");

        labelNomePai.setText("Nome do Pai");

        labelNomeMae.setText("Nome da Mãe");

        labelCategoria.setText("Categoria");

        checkAcademico.setText("Acadêmico");
        checkAcademico.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkAcademicoItemStateChanged(evt);
            }
        });

        tabelaColaboradores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód", "Nome", "E-mail", "Categoria", "Acadêmico", "Ativo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaColaboradores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaColaboradoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaColaboradores);
        if (tabelaColaboradores.getColumnModel().getColumnCount() > 0) {
            tabelaColaboradores.getColumnModel().getColumn(0).setMinWidth(40);
            tabelaColaboradores.getColumnModel().getColumn(0).setMaxWidth(40);
            tabelaColaboradores.getColumnModel().getColumn(3).setMinWidth(120);
            tabelaColaboradores.getColumnModel().getColumn(3).setMaxWidth(120);
            tabelaColaboradores.getColumnModel().getColumn(4).setMinWidth(65);
            tabelaColaboradores.getColumnModel().getColumn(4).setMaxWidth(65);
            tabelaColaboradores.getColumnModel().getColumn(5).setMinWidth(45);
            tabelaColaboradores.getColumnModel().getColumn(5).setMaxWidth(45);
        }

        btnNovo.setText("Novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        labelCodigo.setText("Código");

        textCodigo.setEditable(false);

        jLabel11.setText("Matrícula");

        jLabel12.setText("Curso");

        jLabel13.setText("Período");

        javax.swing.GroupLayout painelRegistroLayout = new javax.swing.GroupLayout(painelRegistro);
        painelRegistro.setLayout(painelRegistroLayout);
        painelRegistroLayout.setHorizontalGroup(
            painelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelRegistroLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(textCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelRegistroLayout.setVerticalGroup(
            painelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(textCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(textPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelPrincipalLayout = new javax.swing.GroupLayout(painelPrincipal);
        painelPrincipal.setLayout(painelPrincipalLayout);
        painelPrincipalLayout.setHorizontalGroup(
            painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincipalLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(btnNovo)
                .addGap(79, 79, 79)
                .addComponent(btnEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGravar)
                .addGap(82, 82, 82)
                .addComponent(btnCancelar)
                .addGap(69, 69, 69)
                .addComponent(btnExcluir)
                .addGap(89, 89, 89))
            .addGroup(painelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(painelPrincipalLayout.createSequentialGroup()
                        .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelPrincipalLayout.createSequentialGroup()
                                .addComponent(labelEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelCategoria)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkAcademico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkAtivo))
                            .addGroup(painelPrincipalLayout.createSequentialGroup()
                                .addComponent(labelCodigo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textCodigo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textNome, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelCPF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelPrincipalLayout.createSequentialGroup()
                                .addComponent(labelRG)
                                .addGap(18, 18, 18)
                                .addComponent(textRG, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNomePai)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNomePai, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelNomeMae)
                                .addGap(18, 18, 18)
                                .addComponent(textNomeMae, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 8, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addComponent(painelRegistro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        painelPrincipalLayout.setVerticalGroup(
            painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNome)
                    .addComponent(textNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCPF)
                    .addComponent(textCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCodigo)
                    .addComponent(textCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEmail)
                    .addComponent(textEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkAtivo)
                    .addComponent(labelCategoria)
                    .addComponent(textCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkAcademico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNomeMae)
                    .addComponent(textNomeMae, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textNomePai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNomePai)
                    .addComponent(labelRG)
                    .addComponent(textRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(painelRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovo)
                    .addComponent(btnEditar)
                    .addComponent(btnGravar)
                    .addComponent(btnCancelar)
                    .addComponent(btnExcluir))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        painelAbas.addTab("Principal", painelPrincipal);

        jLabel1.setText("DDI");

        jLabel2.setText("DDD");

        jLabel3.setText("Número do telefone");

        jLabel4.setText("Operadora");

        jLabel5.setText("Colaborador");

        textColaboradorTelefone.setEditable(false);

        tabelaTelefones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód", "DDI", "DDD", "Operadora", "Número"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaTelefones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaTelefonesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabelaTelefones);

        botaoNovoTelefone.setText("Novo");
        botaoNovoTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNovoTelefoneActionPerformed(evt);
            }
        });

        botaoEditarTelefone.setText("Editar");
        botaoEditarTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarTelefoneActionPerformed(evt);
            }
        });

        botaoGravarTelefone.setText("Gravar");
        botaoGravarTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarTelefoneActionPerformed(evt);
            }
        });

        botaoCancelarTelefone.setText("Cancelar");
        botaoCancelarTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarTelefoneActionPerformed(evt);
            }
        });

        botaoExcluirTelefone.setText("Excluir");
        botaoExcluirTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirTelefoneActionPerformed(evt);
            }
        });

        jLabel6.setText("Código");

        textCodigoTelefone.setEditable(false);

        javax.swing.GroupLayout painelTelefonesLayout = new javax.swing.GroupLayout(painelTelefones);
        painelTelefones.setLayout(painelTelefonesLayout);
        painelTelefonesLayout.setHorizontalGroup(
            painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTelefonesLayout.createSequentialGroup()
                .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelTelefonesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelTelefonesLayout.createSequentialGroup()
                                .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(painelTelefonesLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textDDITelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textOperadoraTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2))
                                    .addGroup(painelTelefonesLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textCodigoTelefone)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textColaboradorTelefone, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelTelefonesLayout.createSequentialGroup()
                                        .addComponent(textDDDTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textNumeroTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(painelTelefonesLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(botaoNovoTelefone)
                        .addGap(64, 64, 64)
                        .addComponent(botaoEditarTelefone)
                        .addGap(70, 70, 70)
                        .addComponent(botaoGravarTelefone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoCancelarTelefone)
                        .addGap(85, 85, 85)
                        .addComponent(botaoExcluirTelefone)
                        .addGap(96, 96, 96)))
                .addContainerGap())
        );
        painelTelefonesLayout.setVerticalGroup(
            painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTelefonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textCodigoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(textColaboradorTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(textDDITelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textNumeroTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel2)
                        .addComponent(textDDDTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textOperadoraTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botaoCancelarTelefone)
                        .addComponent(botaoExcluirTelefone))
                    .addGroup(painelTelefonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botaoEditarTelefone)
                        .addComponent(botaoNovoTelefone)
                        .addComponent(botaoGravarTelefone)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        painelAbas.addTab("Telefones", painelTelefones);

        tabelaProjetos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProjetos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProjetosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaProjetos);
        if (tabelaProjetos.getColumnModel().getColumnCount() > 0) {
            tabelaProjetos.getColumnModel().getColumn(0).setMinWidth(70);
            tabelaProjetos.getColumnModel().getColumn(0).setMaxWidth(70);
        }

        javax.swing.GroupLayout painelProjetosLayout = new javax.swing.GroupLayout(painelProjetos);
        painelProjetos.setLayout(painelProjetosLayout);
        painelProjetosLayout.setHorizontalGroup(
            painelProjetosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelProjetosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelProjetosLayout.setVerticalGroup(
            painelProjetosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelProjetosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );

        painelAbas.addTab("Projetos", painelProjetos);

        tabelaProjetosGerenciados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProjetosGerenciados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProjetosGerenciadosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabelaProjetosGerenciados);
        if (tabelaProjetosGerenciados.getColumnModel().getColumnCount() > 0) {
            tabelaProjetosGerenciados.getColumnModel().getColumn(0).setMinWidth(70);
            tabelaProjetosGerenciados.getColumnModel().getColumn(0).setMaxWidth(70);
        }

        btnNovoProjetoGerenciado.setText("Novo Projeto");
        btnNovoProjetoGerenciado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoProjetoGerenciadoActionPerformed(evt);
            }
        });

        btnAtualizarListaProjGerenciados.setText("Atualizar");
        btnAtualizarListaProjGerenciados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarListaProjGerenciadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelProjetosGerenciadosLayout = new javax.swing.GroupLayout(painelProjetosGerenciados);
        painelProjetosGerenciados.setLayout(painelProjetosGerenciadosLayout);
        painelProjetosGerenciadosLayout.setHorizontalGroup(
            painelProjetosGerenciadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelProjetosGerenciadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(painelProjetosGerenciadosLayout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(btnNovoProjetoGerenciado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAtualizarListaProjGerenciados)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelProjetosGerenciadosLayout.setVerticalGroup(
            painelProjetosGerenciadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelProjetosGerenciadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelProjetosGerenciadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovoProjetoGerenciado)
                    .addComponent(btnAtualizarListaProjGerenciados))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelAbas.addTab("Projetos Gerenciados", painelProjetosGerenciados);

        jLabel7.setText("Código");

        textCodigoEstado.setEditable(false);

        jLabel8.setText("Nome");

        jLabel9.setText("Data de Início");

        jLabel10.setText("Data de Término");

        tabelaEstados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód", "Nome", "Data de Início", "Data de Término"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaEstados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaEstadosMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tabelaEstados);

        botaoNovoEstado.setText("Novo");
        botaoNovoEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNovoEstadoActionPerformed(evt);
            }
        });

        botaoEditarEstado.setText("Editar");
        botaoEditarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarEstadoActionPerformed(evt);
            }
        });

        botaoGravarEstado.setText("Gravar");
        botaoGravarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarEstadoActionPerformed(evt);
            }
        });

        botaoCancelarEstado.setText("Cancelar");
        botaoCancelarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarEstadoActionPerformed(evt);
            }
        });

        botaoExcluirEstado.setText("Excluir");
        botaoExcluirEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelHistoricoLayout = new javax.swing.GroupLayout(painelHistorico);
        painelHistorico.setLayout(painelHistoricoLayout);
        painelHistoricoLayout.setHorizontalGroup(
            painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addGroup(painelHistoricoLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textCodigoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textNomeEstado)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textDataIniEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textDataTerEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(painelHistoricoLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(botaoNovoEstado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(botaoEditarEstado)
                .addGap(91, 91, 91)
                .addComponent(botaoGravarEstado)
                .addGap(93, 93, 93)
                .addComponent(botaoCancelarEstado)
                .addGap(69, 69, 69)
                .addComponent(botaoExcluirEstado)
                .addGap(76, 76, 76))
        );
        painelHistoricoLayout.setVerticalGroup(
            painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(textCodigoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(textNomeEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(textDataIniEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(textDataTerEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(painelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoNovoEstado)
                    .addComponent(botaoEditarEstado)
                    .addComponent(botaoGravarEstado)
                    .addComponent(botaoCancelarEstado)
                    .addComponent(botaoExcluirEstado))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelAbas.addTab("Histórico", painelHistorico);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelAbas)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelAbas))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        painelRegistro.setVisible(false);
        desabilitarAbas();
        inicializarColaboradores();
    }//GEN-LAST:event_formWindowOpened

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limparComponentesColaborador();
        desabilitarControlesColaborador();
        tabelaColaboradores.clearSelection();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja apagar esse Colaborador?",
                "Confirmação de exclusao", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.NO_OPTION) {
            return;
        }

        limparComponentesColaborador();

        DefaultTableModel m = (DefaultTableModel) tabelaColaboradores.getModel();
        int linha = tabelaColaboradores.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) m.getValueAt(linha, 0);
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", codigo);

        String msg = ControleColaborador.remover(dados);
        JOptionPane.showMessageDialog(this, msg, "Exclusão", JOptionPane.INFORMATION_MESSAGE);

        if (msg.equals(Mensagens.SUCESSO)) {
            m.removeRow(linha);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        limparComponentesColaborador();
        textCodigo.setText("");
        tabelaColaboradores.clearSelection();
        desabilitarAbas();
        habilitarControlesColaborador();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tabelaColaboradores.getSelectedRow() != -1) {
            habilitarControlesColaborador();
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        desabilitarControlesColaborador();

        HashMap<String, Object> dados = new HashMap<>();

        dados.put("codigo", textCodigo.getText());
        dados.put("cpf", textCPF.getText());
        dados.put("categoria", textCategoria.getText());
        dados.put("email", textEmail.getText());
        dados.put("nome", textNome.getText());
        dados.put("nomeMae", textNomeMae.getText());
        dados.put("nomePai", textNomePai.getText());
        dados.put("rg", textRG.getText());
        dados.put("academico", checkAcademico.isSelected());
        dados.put("ativo", checkAtivo.isSelected());
        dados.put("cursoAcademico", textCurso.getText());
        dados.put("matriculaAcademico", textMatricula.getText());
        dados.put("periodoAcademico", textPeriodo.getText());

        String msg = ControleColaborador.salvar(dados);
        JOptionPane.showMessageDialog(this, msg, "Gravação", JOptionPane.INFORMATION_MESSAGE);

        if (msg.equals(Mensagens.SUCESSO)) {
            limparComponentesColaborador();
            int linha = tabelaColaboradores.getSelectedRow();
            atualizarTabela(linha, dados);
        } else {
            habilitarControlesColaborador();
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void tabelaColaboradoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaColaboradoresMouseClicked
        DefaultTableModel m = (DefaultTableModel) tabelaColaboradores.getModel();
        int linha = tabelaColaboradores.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) m.getValueAt(linha, 0);
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", codigo);

        HashMap<String, Object> c = ControleColaborador.carregarColaborador(dados);
        if (c == null) {
            JOptionPane.showMessageDialog(this, "Erro ao recuperar o colaborador selecionado",
                    "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        habilitarAbas();

        textCodigo.setText(c.get("codigo").toString());
        textCPF.setText(c.get("cpf").toString());
        textCategoria.setText(c.get("categoria").toString());
        textEmail.setText(c.get("email").toString());
        textNome.setText(c.get("nome").toString());
        textNomeMae.setText(c.get("nomeMae").toString());
        textNomePai.setText(c.get("nomePai").toString());
        textRG.setText(c.get("rg").toString());
        textCurso.setText(c.get("cursoAcademico").toString());
        textMatricula.setText(c.get("matriculaAcademico").toString());
        textPeriodo.setText(c.get("periodoAcademico").toString());
        checkAcademico.setSelected((Boolean) c.get("academico"));
        checkAtivo.setSelected((Boolean) c.get("ativo"));
        textCurso.setText(c.get("cursoAcademico").toString());
        textMatricula.setText(c.get("matriculaAcademico").toString());
        textPeriodo.setText(c.get("periodoAcademico").toString());

        if (checkAcademico.isSelected() == true) {
            painelRegistro.setVisible(true);
        }
    }//GEN-LAST:event_tabelaColaboradoresMouseClicked

    private void painelAbasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_painelAbasStateChanged
        String aba = painelAbas.getTitleAt(painelAbas.getSelectedIndex());
        if (aba.equals("Projetos")) {
            carregarProjetos();
        } else if (aba.equals("Projetos Gerenciados")) {
            carregarProjetosGerenciados();
        } else if (aba.equals("Telefones")) {

            inicializarColaboradoresTelefone();
            carregarTelefones();
        } else if (aba.equals("Histórico")) {

            inicializarColaboradoresEstado();
            carregarEstado();
        }
    }//GEN-LAST:event_painelAbasStateChanged

    private void tabelaProjetosGerenciadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProjetosGerenciadosMouseClicked
        if (evt.getClickCount() != 2) {
            return;
        }

        int linha = tabelaProjetosGerenciados.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) tabelaProjetosGerenciados.getValueAt(linha, 0);

        VisaoProjeto p = new VisaoProjeto(codigo);
        p.setVisible(true);
    }//GEN-LAST:event_tabelaProjetosGerenciadosMouseClicked

    //CODIGO PARA TELEFONE
    private void botaoCancelarTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarTelefoneActionPerformed
        tabelaTelefones.clearSelection();
        limparComponentesColaboradorTelefone();
        desabilitarControlesColaboradorTelefone();
    }//GEN-LAST:event_botaoCancelarTelefoneActionPerformed

    private void botaoExcluirTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirTelefoneActionPerformed
        int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja apagar esse telefone?",
                "Confirmação de exclusao", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.NO_OPTION) {
            return;
        }

        limparComponentesColaboradorTelefone();

        DefaultTableModel mTelefone = (DefaultTableModel) tabelaTelefones.getModel();
        int linha = tabelaTelefones.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) mTelefone.getValueAt(linha, 0);
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", codigo);

        String msg = ControleColaborador.removerTelefone(dados);
        JOptionPane.showMessageDialog(this, msg, "Exclusão", JOptionPane.INFORMATION_MESSAGE);

        if (msg.equals(Mensagens.SUCESSO)) {
            mTelefone.removeRow(linha);
        }
    }//GEN-LAST:event_botaoExcluirTelefoneActionPerformed

    private void botaoNovoTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNovoTelefoneActionPerformed
        limparComponentesColaboradorTelefone();
        textCodigoTelefone.setText("");
        tabelaTelefones.clearSelection();
        habilitarControlesColaboradorTelefone();
    }//GEN-LAST:event_botaoNovoTelefoneActionPerformed

    private void botaoEditarTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarTelefoneActionPerformed
        if (tabelaTelefones.getSelectedRow() != -1) {
            habilitarControlesColaboradorTelefone();
        }
    }//GEN-LAST:event_botaoEditarTelefoneActionPerformed

    private void botaoGravarTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarTelefoneActionPerformed
        desabilitarControlesColaboradorTelefone();

        HashMap<String, Object> dados = new HashMap<>();

        dados.put("codigo", textCodigoTelefone.getText());
        dados.put("colaborador", textCodigo.getText());
        dados.put("ddi", textDDITelefone.getText());
        dados.put("ddd", textDDDTelefone.getText());
        dados.put("operadora", textOperadoraTelefone.getText());
        dados.put("numero", textNumeroTelefone.getText());

        String msg = ControleColaborador.salvarTelefone(dados);
        JOptionPane.showMessageDialog(this, msg, "Gravação", JOptionPane.INFORMATION_MESSAGE);

        if (msg.equals(Mensagens.SUCESSO)) {
            limparComponentesColaboradorTelefone();
            int linha = tabelaTelefones.getSelectedRow();
            atualizarTabelaTelefone(linha, dados);
        } else {
            habilitarControlesColaboradorTelefone();
        }
    }//GEN-LAST:event_botaoGravarTelefoneActionPerformed

    private void tabelaTelefonesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaTelefonesMouseClicked
        DefaultTableModel m = (DefaultTableModel) tabelaTelefones.getModel();
        int linha = tabelaTelefones.getSelectedRow();
        if (linha == -1) {
            return;
        }

        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", m.getValueAt(linha, 0));

        HashMap<String, Object> t = ControleColaborador.carregarTelefone(dados);
        if (t == null) {
            JOptionPane.showMessageDialog(this, "Erro ao recuperar o telefone selecionado",
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }

        textCodigoTelefone.setText(t.get("codigo").toString());
        textDDITelefone.setText(t.get("ddi").toString());
        textDDDTelefone.setText(t.get("ddd").toString());
        textOperadoraTelefone.setText(t.get("operadora").toString());
        textNumeroTelefone.setText(t.get("numero").toString());
    }//GEN-LAST:event_tabelaTelefonesMouseClicked

    //CODIGO PARA ESTADO
    private void botaoCancelarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarEstadoActionPerformed
        limparComponentesColaboradorEstado();
        desabilitarControlesColaboradorEstado();
        tabelaEstados.clearSelection();
    }//GEN-LAST:event_botaoCancelarEstadoActionPerformed

    private void botaoExcluirEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirEstadoActionPerformed
        int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja apagar esse histórico?",
                "Confirmação de exclusao", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.NO_OPTION) {
            return;
        }

        limparComponentesColaboradorEstado();

        DefaultTableModel mEstado = (DefaultTableModel) tabelaEstados.getModel();
        int linha = tabelaEstados.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) mEstado.getValueAt(linha, 0);
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", codigo);

        String msg = ControleColaborador.removerEstado(dados);
        JOptionPane.showMessageDialog(this, msg, "Exclusão", JOptionPane.INFORMATION_MESSAGE);

        if (msg.equals(Mensagens.SUCESSO)) {
            mEstado.removeRow(linha);
        }
    }//GEN-LAST:event_botaoExcluirEstadoActionPerformed

    private void botaoNovoEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNovoEstadoActionPerformed
        limparComponentesColaboradorEstado();
        textCodigoEstado.setText("");
        tabelaEstados.clearSelection();
        habilitarControlesColaboradorEstado();
    }//GEN-LAST:event_botaoNovoEstadoActionPerformed

    private void botaoEditarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarEstadoActionPerformed
        if (tabelaEstados.getSelectedRow() != -1) {
            habilitarControlesColaboradorEstado();
        }
    }//GEN-LAST:event_botaoEditarEstadoActionPerformed

    private void botaoGravarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarEstadoActionPerformed
        desabilitarControlesColaboradorEstado();

        HashMap<String, Object> dados = new HashMap<>();

        dados.put("codigo", textCodigoEstado.getText());
        dados.put("colaborador", textCodigo.getText());
        dados.put("nome", textNomeEstado.getText());
        dados.put("dataIni", textDataIniEstado.getText());
        dados.put("dataTerm", textDataTerEstado.getText());

        String msg = ControleColaborador.salvarEstado(dados);
        JOptionPane.showMessageDialog(this, msg, "Gravação", JOptionPane.INFORMATION_MESSAGE);

        if (msg.equals(Mensagens.SUCESSO)) {
            limparComponentesColaboradorEstado();
            int linha = tabelaEstados.getSelectedRow();
            atualizarTabelaEstado(linha, dados);
        } else {
            habilitarControlesColaboradorEstado();
        }
    }//GEN-LAST:event_botaoGravarEstadoActionPerformed

    private void tabelaEstadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaEstadosMouseClicked
        DefaultTableModel m = (DefaultTableModel) tabelaEstados.getModel();
        int linha = tabelaEstados.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) m.getValueAt(linha, 0);
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", codigo);

        HashMap<String, Object> t = ControleColaborador.carregarEstado(dados);
        if (t == null) {
            JOptionPane.showMessageDialog(this, "Erro ao recuperar o histórico selecionado",
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }

        textCodigoEstado.setText(t.get("codigo").toString());
        textNomeEstado.setText(t.get("nome").toString());
        textDataIniEstado.setText(t.get("dataIni").toString());
        textDataTerEstado.setText(t.get("dataTerm").toString());
    }//GEN-LAST:event_tabelaEstadosMouseClicked

    private void checkAcademicoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkAcademicoItemStateChanged
        if (checkAcademico.isSelected() == true) {
            painelRegistro.setVisible(true);
        } else {
            painelRegistro.setVisible(false);
        }
    }//GEN-LAST:event_checkAcademicoItemStateChanged

    private void btnNovoProjetoGerenciadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoProjetoGerenciadoActionPerformed
        VisaoProjeto vp = new VisaoProjeto();
        vp.setVisible(true);
    }//GEN-LAST:event_btnNovoProjetoGerenciadoActionPerformed

    private void btnAtualizarListaProjGerenciadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarListaProjGerenciadosActionPerformed
        carregarProjetosGerenciados();
    }//GEN-LAST:event_btnAtualizarListaProjGerenciadosActionPerformed

    private void tabelaProjetosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProjetosMouseClicked
        if (evt.getClickCount() != 2) {
            return;
        }

        int linha = tabelaProjetos.getSelectedRow();
        if (linha == -1) {
            return;
        }

        int codigo = (Integer) tabelaProjetos.getValueAt(linha, 0);

        VisaoProjeto p = new VisaoProjeto(codigo);
        p.setVisible(true);
    }//GEN-LAST:event_tabelaProjetosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisaoColaborador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisaoColaborador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisaoColaborador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisaoColaborador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisaoColaborador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCancelarEstado;
    private javax.swing.JButton botaoCancelarTelefone;
    private javax.swing.JButton botaoEditarEstado;
    private javax.swing.JButton botaoEditarTelefone;
    private javax.swing.JButton botaoExcluirEstado;
    private javax.swing.JButton botaoExcluirTelefone;
    private javax.swing.JButton botaoGravarEstado;
    private javax.swing.JButton botaoGravarTelefone;
    private javax.swing.JButton botaoNovoEstado;
    private javax.swing.JButton botaoNovoTelefone;
    private javax.swing.JButton btnAtualizarListaProjGerenciados;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnNovoProjetoGerenciado;
    private javax.swing.JCheckBox checkAcademico;
    private javax.swing.JCheckBox checkAtivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel labelCPF;
    private javax.swing.JLabel labelCategoria;
    private javax.swing.JLabel labelCodigo;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelNomeMae;
    private javax.swing.JLabel labelNomePai;
    private javax.swing.JLabel labelRG;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JTabbedPane painelAbas;
    private javax.swing.JPanel painelHistorico;
    private javax.swing.JPanel painelPrincipal;
    private javax.swing.JPanel painelProjetos;
    private javax.swing.JPanel painelProjetosGerenciados;
    private javax.swing.JPanel painelRegistro;
    private javax.swing.JPanel painelTelefones;
    private javax.swing.JPanel panelTitulo;
    private javax.swing.JTable tabelaColaboradores;
    private javax.swing.JTable tabelaEstados;
    private javax.swing.JTable tabelaProjetos;
    private javax.swing.JTable tabelaProjetosGerenciados;
    private javax.swing.JTable tabelaTelefones;
    private javax.swing.JTextField textCPF;
    private javax.swing.JTextField textCategoria;
    private javax.swing.JTextField textCodigo;
    private javax.swing.JTextField textCodigoEstado;
    private javax.swing.JTextField textCodigoTelefone;
    private javax.swing.JTextField textColaboradorTelefone;
    private javax.swing.JTextField textCurso;
    private javax.swing.JTextField textDDDTelefone;
    private javax.swing.JTextField textDDITelefone;
    private javax.swing.JTextField textDataIniEstado;
    private javax.swing.JTextField textDataTerEstado;
    private javax.swing.JTextField textEmail;
    private javax.swing.JTextField textMatricula;
    private javax.swing.JTextField textNome;
    private javax.swing.JTextField textNomeEstado;
    private javax.swing.JTextField textNomeMae;
    private javax.swing.JTextField textNomePai;
    private javax.swing.JTextField textNumeroTelefone;
    private javax.swing.JTextField textOperadoraTelefone;
    private javax.swing.JTextField textPeriodo;
    private javax.swing.JTextField textRG;
    // End of variables declaration//GEN-END:variables

    private void carregarTabela() {
        ArrayList<HashMap<String, Object>> colaboradores = ControleColaborador.recuperarTodos();
        DefaultTableModel m = (DefaultTableModel) tabelaColaboradores.getModel();

        for (HashMap<String, Object> c : colaboradores) {
            m.addRow(new Object[]{
                c.get("codigo"),
                c.get("nome"),
                c.get("email"),
                c.get("categoria"),
                c.get("academico"),
                c.get("ativo")});
        }
    }

    private void carregarProjetos() {
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", textCodigo.getText());

        ArrayList<HashMap<String, Object>> projetos = ControleColaborador.carregarProjetos(dados);
        DefaultTableModel m = (DefaultTableModel) tabelaProjetos.getModel();
        m.setRowCount(0);

        for (HashMap<String, Object> p : projetos) {
            m.addRow(new Object[]{p.get("codigo"), p.get("nome")});
        }
    }

    private void carregarProjetosGerenciados() {
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", textCodigo.getText());

        ArrayList<HashMap<String, Object>> projetos = ControleColaborador.carregarProjetosGerenciados(dados);
        DefaultTableModel m = (DefaultTableModel) tabelaProjetosGerenciados.getModel();
        m.setRowCount(0);

        for (HashMap<String, Object> p : projetos) {
            m.addRow(new Object[]{p.get("codigo"), p.get("nome")});
        }
    }

    private void atualizarTabela(int linha, HashMap<String, Object> dados) {
        if (linha == -1) {
            ((DefaultTableModel) tabelaColaboradores.getModel())
                    .addRow(new Object[]{});
            linha = tabelaColaboradores.getRowCount() - 1;
        }

        tabelaColaboradores.setValueAt(dados.get("codigo"), linha, 0);
        tabelaColaboradores.setValueAt(dados.get("nome"), linha, 1);
        tabelaColaboradores.setValueAt(dados.get("email"), linha, 2);
        tabelaColaboradores.setValueAt(dados.get("categoria"), linha, 3);
        tabelaColaboradores.setValueAt(dados.get("academico"), linha, 4);
        tabelaColaboradores.setValueAt(dados.get("ativo"), linha, 5);
    }
// CÓDIGOS DA ABA TELEFONE

    private void limparComponentesColaboradorTelefone() {
        textDDITelefone.setText("");
        textDDDTelefone.setText("");
        textNumeroTelefone.setText("");
        textOperadoraTelefone.setText("");
        textColaboradorTelefone.setText("");
    }

    private void toggleComponentesColaboradorTelefone(boolean ativo) {
        // Ativo será verdadeiro quando o formulário aceitar entradas
        botaoCancelarTelefone.setEnabled(ativo);
        botaoGravarTelefone.setEnabled(ativo);
        botaoEditarTelefone.setEnabled(!ativo);
        botaoExcluirTelefone.setEnabled(!ativo);
        botaoNovoTelefone.setEnabled(!ativo);

        textColaboradorTelefone.setEnabled(ativo);
        textCodigoTelefone.setEnabled(ativo);
        textDDITelefone.setEnabled(ativo);
        textDDDTelefone.setEnabled(ativo);
        textOperadoraTelefone.setEnabled(ativo);
        textNumeroTelefone.setEnabled(ativo);
    }

    private void habilitarControlesColaboradorTelefone() {
        toggleComponentesColaboradorTelefone(true);
    }

    private void desabilitarControlesColaboradorTelefone() {
        toggleComponentesColaboradorTelefone(false);
    }

    private void inicializarColaboradoresTelefone() {
        desabilitarControlesColaboradorTelefone();
        textColaboradorTelefone.setText(textNome.getText());
    }

    private void atualizarTabelaTelefone(int linha, HashMap<String, Object> dados) {
        if (linha == -1) {
            ((DefaultTableModel) tabelaTelefones.getModel())
                    .addRow(new Object[]{});
            linha = tabelaTelefones.getRowCount() - 1;
        }

        tabelaTelefones.setValueAt(dados.get("codigo"), linha, 0);
        tabelaTelefones.setValueAt(dados.get("ddi"), linha, 1);
        tabelaTelefones.setValueAt(dados.get("ddd"), linha, 2);
        tabelaTelefones.setValueAt(dados.get("operadora"), linha, 3);
        tabelaTelefones.setValueAt(dados.get("numero"), linha, 4);
    }

    private void carregarTelefones() {
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", textCodigo.getText());

        ArrayList<HashMap<String, Object>> telefones = ControleColaborador.carregarTelefones(dados);
        DefaultTableModel m = (DefaultTableModel) tabelaTelefones.getModel();
        m.setRowCount(0);

        for (HashMap<String, Object> t : telefones) {
            m.addRow(new Object[]{t.get("codigo"), t.get("ddi"), t.get("ddd"), t.get("operadora"), t.get("numero")});
        }
    }

    //CÓDIGOS DA ABA HISTÓRICO
    private void limparComponentesColaboradorEstado() {
        tabelaTelefones.clearSelection();
        textNomeEstado.setText("");
        textDataIniEstado.setText("");
        textDataTerEstado.setText("");
    }

    private void toggleComponentesColaboradorEstado(boolean ativo) {
        botaoCancelarEstado.setEnabled(ativo);
        botaoGravarEstado.setEnabled(ativo);
        botaoEditarEstado.setEnabled(!ativo);
        botaoExcluirEstado.setEnabled(!ativo);
        botaoNovoEstado.setEnabled(!ativo);

        textCodigoEstado.setEnabled(ativo);
        textNomeEstado.setEnabled(ativo);
        textDataIniEstado.setEnabled(ativo);
        textDataTerEstado.setEnabled(ativo);
    }

    private void habilitarControlesColaboradorEstado() {
        toggleComponentesColaboradorEstado(true);
    }

    private void desabilitarControlesColaboradorEstado() {
        tabelaColaboradores.clearSelection();
        toggleComponentesColaboradorEstado(false);
    }

    private void inicializarColaboradoresEstado() {
        desabilitarControlesColaboradorEstado();
    }

    private void atualizarTabelaEstado(int linha, HashMap<String, Object> dados) {
        if (linha == -1) {
            ((DefaultTableModel) tabelaEstados.getModel())
                    .addRow(new Object[]{});
            linha = tabelaEstados.getRowCount() - 1;
        }

        tabelaEstados.setValueAt(dados.get("codigo"), linha, 0);
        tabelaEstados.setValueAt(dados.get("nome"), linha, 1);
        tabelaEstados.setValueAt(dados.get("dataIni").toString(), linha, 2);
        tabelaEstados.setValueAt(dados.get("dataTerm").toString(), linha, 3);
    }

    private void carregarEstado() {
        HashMap<String, Object> dados = new HashMap<>();
        dados.put("codigo", textCodigo.getText());

        ArrayList<HashMap<String, Object>> estados = ControleColaborador.carregarEstados(dados);
        DefaultTableModel m = (DefaultTableModel) tabelaEstados.getModel();
        m.setRowCount(0);

        for (HashMap<String, Object> e : estados) {
            m.addRow(new Object[]{e.get("codigo"), e.get("nome"), e.get("dataIni"), e.get("dataTerm")});
        }
    }

    private void desabilitarAbas() {
        toggleAbas(false);
    }

    private void habilitarAbas() {
        toggleAbas(true);
    }

    private void toggleAbas(boolean mostrar) {
        int n = painelAbas.getTabCount();
        for (int i = 1; i < n; i++) {
            painelAbas.setEnabledAt(i, mostrar);
        }
    }

}
